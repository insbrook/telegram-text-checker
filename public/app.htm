<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Telegram text checking WebApp</title>

    <meta property="og:type" content="website" />
    <meta property="og:title" content="WebApp for spelling, grammar and punctuation errors"/>
    <meta property="og:description" content="Telegram WebApp for spelling, grammar and punctuation errors"/>
    <meta property="og:url" content="https://text-correction.com/"/>
    <meta property="og:site_name" content="Telegram text checking WebApp"/>
    <meta property="og:see_also" content="https://textgears.com/api/"/>

    <link rel="stylesheet" href="assets/style.css?v=20"/>
    <script src="assets/axios.min.js"></script>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <script type="text/javascript" src="assets/api.js?v=20"></script>
    <script type="text/javascript" src="assets/editor.js?v=20"></script>
    <script type="text/javascript" src="assets/i18n.js?v=20"></script>
</head>
<body>

<!-- Basic HTML -->
<div id="wrap">

    <div class="button-wrap">
        <div id="clearButton" class="button" onclick="editor.clear()"></div>
        <div id="copyButton" class="button" onclick="editor.copyText()"></div>
        <div id="checkButton" class="button" onclick="editor.check()"></div>
    </div>

    <div id="editor"
         spellcheck="false"
         placeholder=""
         contenteditable="true"></div>
    <!-- Spellcheck must be "false" to prevent browser spelling check. It's much worse. -->
    <!-- Placeholder is set via CSS trick. Look style.css for more info -->
    <!-- Contenteditable must be "true" to make div a text-area like -->

    <script type="text/javascript">
        /*
         * Sample code for basic Web App routines
         */

        /*
         * Here it is, the config!
         */
        var appConfig = {
            backend: {
                // You can use api.textgears.com backend to run your own app
                endpoint: window.location.origin || "https://text-correction.com",
                language: null,
                key: "TEST",
            },
            defaultTheme: {
                bgColor: "#FFFFFF",
                secondaryBgColor: "#CCCCCC",
                textColor: "#000000",
                buttonColor: "#8089FF",
                buttonTextColor: "#FFFFFF"
            },
            language: (Telegram.WebApp.initDataUnsafe.user || {}).language_code ||
                navigator.language ||
                navigator.userLanguage ||
                'en-US'
        }

        // Choose phrases for user language
        if (TextCheckerPhrases.hasOwnProperty(appConfig.language.substring(0, 2))) {
            TextCheckerPhrases.text = TextCheckerPhrases[appConfig.language.substring(0, 2)];
        }

        // Main app elements
        var editorDiv = document.getElementById("editor"),
            copyButton = document.getElementById("copyButton"),
            clearButton = document.getElementById("clearButton"),
            checkButton = document.getElementById("checkButton");

        // Use api to make requests to text checking backend
        var api = new TextCorrectionApi({
            endpoint: appConfig.backend.endpoint,
            key: appConfig.backend.key,
            language: appConfig.backend.language
        });
        // Set up editor
        var editor = new TextEditor(editorDiv, api, {
            errorHighlightClass: "editor-highlight",
            errorPopupClass: "editor-error-container",
            defaultExceptionText: TextCheckerPhrases.text.error,
            // Bear in mind that so many people write from right to left!
            rtl: ["ar", "fa", "he", "ku", "ps", "ur", "yi"].indexOf(appConfig.language.substring(0, 2)) != -1
        });

        // Setup internationalization (i18n)
        // Yeah, any JS framework templating engine would be useful here...
        var onLanguageChanged = function () {
            editorDiv.setAttribute('placeholder', TextCheckerPhrases.text.editorPlaceholder);
            editorDiv.innerText = TextCheckerPhrases.text.editorSample;
            copyButton.innerText = TextCheckerPhrases.text.copy;
            clearButton.innerText = TextCheckerPhrases.text.clear;
            checkButton.innerText = TextCheckerPhrases.text.check;
        }

        // Method to adjust theme
        // @see https://core.telegram.org/bots/webapps#themeparams
        var adjustAppTheme = function () {
            document.body.style.backgroundColor = window.Telegram.WebApp.themeParams.secondary_bg_color || appConfig.defaultTheme.secondaryBgColor;
            editorDiv.style.backgroundColor = window.Telegram.WebApp.themeParams.bg_color || appConfig.defaultTheme.bgColor;
            document.body.style.color = window.Telegram.WebApp.themeParams.text_color || appConfig.defaultTheme.textColor;
            checkButton.style.backgroundColor =
                copyButton.style.backgroundColor =
                    clearButton.style.backgroundColor =
                        window.Telegram.WebApp.themeParams.button_color || appConfig.defaultTheme.buttonColor;
            checkButton.style.color =
                copyButton.style.color =
                    clearButton.style.color =
                        window.Telegram.WebApp.themeParams.button_text_color || appConfig.defaultTheme.buttonTextColor;
        }

        // Page resize handler
        var adjustAppSize = function () {
            editorDiv.style.height = (window.Telegram.WebApp.viewportStableHeight -
                20 - 10 - // Upper padding
                (20 + checkButton.clientHeight + 20) // Button;
            ) + 'px'
        }
        // Call it and set up event handling then
        adjustAppSize();
        adjustAppTheme();
        onLanguageChanged();
        Telegram.WebApp.onEvent("viewportChanged", adjustAppSize)
        Telegram.WebApp.onEvent("themeChanged", adjustAppTheme)

        // Make check on init
        editor.check();
    </script>

</div>

</body>
</html>
